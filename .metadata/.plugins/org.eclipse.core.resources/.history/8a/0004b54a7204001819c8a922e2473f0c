package br.ufpe.cin.files;

import br.ufpe.cin.generated.SimplePrintVisitor;
import br.ufpe.cin.mergers.util.MergeConflict;
import br.ufpe.cin.mergers.util.MergeContext;
import com.github.javaparser.JavaParser;
import com.github.javaparser.ast.CompilationUnit;
import de.ovgu.cide.fstgen.ast.FSTNode;
import de.ovgu.cide.fstgen.ast.FSTNonTerminal;
import de.ovgu.cide.fstgen.ast.FSTTerminal;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.PrintStream;
import java.io.StringReader;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.OpenOption;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import org.apache.commons.io.FilenameUtils;
import org.apache.commons.lang3.StringUtils;

public final class FilesManager
{
  @Deprecated
  public static List<FilesTuple> fillFilesTuples(String leftDir, String baseDir, String rightDir)
  {
    leftDir = FilenameUtils.separatorsToSystem(leftDir);
    baseDir = FilenameUtils.separatorsToSystem(baseDir);
    rightDir = FilenameUtils.separatorsToSystem(rightDir);
    
    List<FilesTuple> tuples = new ArrayList();
    
    LinkedList<String> filesPathFromBase = new LinkedList(listFilesPath(baseDir));
    LinkedList<String> filesPathFromLeft = new LinkedList(listFilesPath(leftDir));
    LinkedList<String> filesPathFromRight = new LinkedList(listFilesPath(rightDir));
    
    searchCorrespondingFiles(leftDir, baseDir, rightDir, tuples, filesPathFromLeft, filesPathFromBase, filesPathFromRight, false, true, false);
    searchCorrespondingFiles(baseDir, leftDir, rightDir, tuples, filesPathFromBase, filesPathFromLeft, filesPathFromRight, true, false, false);
    searchCorrespondingFiles(leftDir, rightDir, baseDir, tuples, filesPathFromLeft, filesPathFromRight, filesPathFromBase, false, false, true);
    
    return tuples;
  }
  
  public static List<FilesTuple> fillFilesTuples(String leftDir, String baseDir, String rightDir, String outputpath, List<String> visitedPaths)
  {
    String visitedPath = leftDir + baseDir + rightDir;
    visitedPaths.add(visitedPath);
    
    leftDir = FilenameUtils.separatorsToSystem(leftDir);
    baseDir = FilenameUtils.separatorsToSystem(baseDir);
    rightDir = FilenameUtils.separatorsToSystem(rightDir);
    
    List<FilesTuple> tuples = new ArrayList();
    
    LinkedList<String> filesFromLeft = new LinkedList(listFiles(leftDir));
    LinkedList<String> filesFromBase = new LinkedList(listFiles(baseDir));
    LinkedList<String> filesFromRight = new LinkedList(listFiles(rightDir));
    for (String l : filesFromLeft)
    {
      File leftFile = new File(l);
      File baseFile = new File(baseDir + File.separator + leftFile.getName());
      File rightFile = new File(rightDir + File.separator + leftFile.getName());
      if (!baseFile.exists()) {
        baseFile = null;
      }
      if (!rightFile.exists()) {
        rightFile = null;
      }
      FilesTuple tp = new FilesTuple(leftFile, baseFile, rightFile, (outputpath != null) && (!outputpath.isEmpty()) ? outputpath : rightDir);
      if (!tuples.contains(tp)) {
        tuples.add(tp);
      }
    }
    for (String b : filesFromBase)
    {
      File baseFile = new File(b);
      File leftFile = new File(leftDir + File.separator + baseFile.getName());
      File rightFile = new File(rightDir + File.separator + baseFile.getName());
      if (!leftFile.exists()) {
        leftFile = null;
      }
      if (!rightFile.exists()) {
        rightFile = null;
      }
      FilesTuple tp = new FilesTuple(leftFile, baseFile, rightFile, (outputpath != null) && (!outputpath.isEmpty()) ? outputpath : rightDir);
      if (!tuples.contains(tp)) {
        tuples.add(tp);
      }
    }
    File leftFile;
    for (String r : filesFromRight)
    {
      File rightFile = new File(r);
      File baseFile = new File(baseDir + File.separator + rightFile.getName());
      leftFile = new File(leftDir + File.separator + rightFile.getName());
      if (!baseFile.exists()) {
        baseFile = null;
      }
      if (!leftFile.exists()) {
        leftFile = null;
      }
      FilesTuple tp = new FilesTuple(leftFile, baseFile, rightFile, (outputpath != null) && (!outputpath.isEmpty()) ? outputpath : rightDir);
      if (!tuples.contains(tp)) {
        tuples.add(tp);
      }
    }
    LinkedList<String> subdirectoriesFromLeft = new LinkedList(listDirectories(leftDir));
    Object subdirectoriesFromBase = new LinkedList(listDirectories(baseDir));
    LinkedList<String> subdirectoriesFromRight = new LinkedList(listDirectories(rightDir));
    for (String sl : subdirectoriesFromLeft)
    {
      String foldername = new File(sl).getName();
      if (!visitedPaths.contains(sl + baseDir + File.separator + foldername + rightDir + File.separator + foldername))
      {
        List<FilesTuple> tps = fillFilesTuples(sl, baseDir + File.separator + foldername, rightDir + File.separator + foldername, outputpath, visitedPaths);
        tuples.removeAll(tps);
        tuples.addAll(tps);
      }
    }
    for (String sb : (LinkedList)subdirectoriesFromBase)
    {
      String foldername = new File(sb).getName();
      if (!visitedPaths.contains(leftDir + File.separator + foldername + sb + rightDir + File.separator + foldername))
      {
        List<FilesTuple> tps = fillFilesTuples(leftDir + File.separator + foldername, sb, rightDir + File.separator + foldername, outputpath, visitedPaths);
        tuples.removeAll(tps);
        tuples.addAll(tps);
      }
    }
    for (String sr : subdirectoriesFromRight)
    {
      String foldername = new File(sr).getName();
      if (!visitedPaths.contains(leftDir + File.separator + foldername + baseDir + File.separator + foldername + sr))
      {
        List<FilesTuple> tps = fillFilesTuples(leftDir + File.separator + foldername, baseDir + File.separator + foldername, sr, outputpath, visitedPaths);
        tuples.removeAll(tps);
        tuples.addAll(tps);
      }
    }
    return tuples;
  }
  
  public static List<String> listFilesPath(String directory)
  {
    List<String> allFiles = new ArrayList();
    File[] fList = new File(directory).listFiles();
    if (fList != null)
    {
      File[] arrayOfFile1;
      int j = (arrayOfFile1 = fList).length;
      for (int i = 0; i < j; i++)
      {
        File file = arrayOfFile1[i];
        if (file.isFile()) {
          allFiles.add(file.getAbsolutePath());
        } else if (file.isDirectory()) {
          allFiles.addAll(listFilesPath(file.getAbsolutePath()));
        }
      }
    }
    return allFiles;
  }
  
  public static List<String> listFiles(String directory)
  {
    List<String> allFiles = new ArrayList();
    File[] fList = new File(directory).listFiles();
    if (fList != null)
    {
      File[] arrayOfFile1;
      int j = (arrayOfFile1 = fList).length;
      for (int i = 0; i < j; i++)
      {
        File file = arrayOfFile1[i];
        if (file.isFile()) {
          allFiles.add(file.getAbsolutePath());
        }
      }
    }
    return allFiles;
  }
  
  public static List<String> listDirectories(String directory)
  {
    List<String> allFiles = new ArrayList();
    File[] fList = new File(directory).listFiles();
    if (fList != null)
    {
      File[] arrayOfFile1;
      int j = (arrayOfFile1 = fList).length;
      for (int i = 0; i < j; i++)
      {
        File file = arrayOfFile1[i];
        if (file.isDirectory()) {
          allFiles.add(file.getAbsolutePath());
        }
      }
    }
    return allFiles;
  }
  
  public static String readFileContent(File file)
  {
    String content = "";
    try
    {
      BufferedReader reader = Files.newBufferedReader(Paths.get(file.getAbsolutePath(), new String[0]), StandardCharsets.UTF_8);
      content = (String)reader.lines().collect(Collectors.joining("\n"));
    }
    catch (Exception localException) {}
    return content;
  }
  
  private static void searchCorrespondingFiles(String firstVariantDir, String mainDir, String secondVariantDir, List<FilesTuple> listOfTuplesToBeFilled, LinkedList<String> filesPathFromFirstVariant, LinkedList<String> filesPathFromMainVariant, LinkedList<String> filesPathFromSecondVariant, boolean isFirstVariantDriven, boolean isMainVariantDriven, boolean isSecondVariantDriven)
  {
    while (!filesPathFromMainVariant.isEmpty())
    {
      String baseFilePath = (String)filesPathFromMainVariant.poll();
      String correspondingFirstVariantFilePath = replaceFilePath(baseFilePath, mainDir, firstVariantDir);
      String correspondingSecondVariantFilePath = replaceFilePath(baseFilePath, mainDir, secondVariantDir);
      
      File firstVariantFile = new File(correspondingFirstVariantFilePath);
      File baseFile = new File(baseFilePath);
      File secondVariantFile = new File(correspondingSecondVariantFilePath);
      if (!firstVariantFile.exists()) {
        firstVariantFile = null;
      }
      if (!baseFile.exists()) {
        baseFile = null;
      }
      if (!secondVariantFile.exists()) {
        secondVariantFile = null;
      }
      if (isFirstVariantDriven)
      {
        FilesTuple tuple = new FilesTuple(baseFile, firstVariantFile, secondVariantFile);
        listOfTuplesToBeFilled.add(tuple);
      }
      else if (isMainVariantDriven)
      {
        FilesTuple tuple = new FilesTuple(firstVariantFile, baseFile, secondVariantFile);
        listOfTuplesToBeFilled.add(tuple);
      }
      else if (isSecondVariantDriven)
      {
        FilesTuple tuple = new FilesTuple(firstVariantFile, secondVariantFile, baseFile);
        listOfTuplesToBeFilled.add(tuple);
      }
      if (filesPathFromFirstVariant.contains(correspondingFirstVariantFilePath)) {
        filesPathFromFirstVariant.remove(correspondingFirstVariantFilePath);
      }
      if (filesPathFromSecondVariant.contains(correspondingSecondVariantFilePath)) {
        filesPathFromSecondVariant.remove(correspondingSecondVariantFilePath);
      }
    }
  }
  
  private static String replaceFilePath(String filePath, String oldPattern, String newPattern)
  {
    String result = filePath.replace(oldPattern, newPattern);
    return result;
  }
  
  public static boolean writeContent(String filePath, String content)
  {
    if ((content != null) && (!content.isEmpty())) {
      try
      {
        File file = new File(filePath);
        if (!file.exists())
        {
          file.getParentFile().mkdirs();
          file.createNewFile();
        }
        BufferedWriter writer = Files.newBufferedWriter(Paths.get(filePath, new String[0]), new OpenOption[0]);
        writer.write(content);
        writer.flush();writer.close();
      }
      catch (NullPointerException localNullPointerException) {}catch (Exception e)
      {
        System.err.println(e.toString());
        return false;
      }
    }
    return true;
  }
  
  public static boolean writeContent(File file, String content)
  {
    if (!content.isEmpty()) {
      try
      {
        BufferedWriter writer = Files.newBufferedWriter(Paths.get(file.getAbsolutePath(), new String[0]), new OpenOption[0]);
        writer.write(content);
        writer.flush();writer.close();
      }
      catch (NullPointerException localNullPointerException) {}catch (Exception e)
      {
        System.err.println(e.toString());
        return false;
      }
    }
    return true;
  }
  
  public static void validateFiles(File... files)
  {
    File[] arrayOfFile = files;int j = files.length;
    for (int i = 0; i < j; i++)
    {
      File f = arrayOfFile[i];
      if ((f != null) && (!f.exists()))
      {
        System.err.println(f.getAbsolutePath() + " does not exists! Try again with a valid file.");
        System.exit(-1);
      }
    }
  }
  
  public static String getStringContentIntoSingleLineNoSpacing(String content)
  {
    return content.replaceAll("\\r\\n|\\r|\\n", "").replaceAll("\\s+", "");
  }
  
  public static List<MergeConflict> extractMergeConflicts(String mergedCode)
  {
    List<MergeConflict> mergeConflicts = new ArrayList();
    try
    {
      String CONFLICT_HEADER_BEGIN = "<<<<<<<";
      String CONFLICT_MID = "=======";
      
      String CONFLICT_HEADER_END = ">>>>>>>";
      String leftConflictingContent = "";
      String rightConflictingContent = "";
      boolean isConflictOpen = false;
      boolean isLeftContent = false;
      int lineCounter = 0;
      int startLOC = 0;
      int endLOC = 0;
      
      List<String> lines = new ArrayList();
      BufferedReader reader = new BufferedReader(new StringReader(mergedCode));
      lines = (List)reader.lines().collect(Collectors.toList());
      Iterator<String> itlines = lines.iterator();
      while (itlines.hasNext())
      {
        String line = (String)itlines.next();
        lineCounter++;
        if (line.contains(CONFLICT_HEADER_BEGIN))
        {
          isConflictOpen = true;
          isLeftContent = true;
          startLOC = lineCounter;
        }
        else if (line.contains(CONFLICT_MID))
        {
          isLeftContent = false;
        }
        else if (line.contains(CONFLICT_HEADER_END))
        {
          endLOC = lineCounter;
          MergeConflict mergeConflict = new MergeConflict(leftConflictingContent, rightConflictingContent, startLOC, endLOC);
          mergeConflicts.add(mergeConflict);
          
          isConflictOpen = false;
          isLeftContent = false;
          leftConflictingContent = "";
          rightConflictingContent = "";
        }
        else if (isConflictOpen)
        {
          if (isLeftContent) {
            leftConflictingContent = leftConflictingContent + line + "\n";
          } else {
            rightConflictingContent = rightConflictingContent + line + "\n";
          }
        }
      }
    }
    catch (Exception localException) {}
    return mergeConflicts;
  }
  
  public static boolean findAndReplaceASTNodeContent(FSTNode node, String oldContent, String newContent)
  {
    if ((node instanceof FSTNonTerminal))
    {
      for (FSTNode child : ((FSTNonTerminal)node).getChildren()) {
        if (findAndReplaceASTNodeContent(child, oldContent, newContent)) {
          return true;
        }
      }
    }
    else if ((node instanceof FSTTerminal))
    {
      FSTTerminal terminal = (FSTTerminal)node;
      if (getStringContentIntoSingleLineNoSpacing(terminal.getBody()).equals(getStringContentIntoSingleLineNoSpacing(oldContent)))
      {
        terminal.setBody(newContent);
        return true;
      }
    }
    return false;
  }
  
  public static boolean findAndDeleteASTNode(FSTNode node, String content)
  {
    if ((node instanceof FSTNonTerminal)) {
      for (FSTNode child : ((FSTNonTerminal)node).getChildren()) {
        if (findAndDeleteASTNode(child, content)) {
          return true;
        }
      }
    } else if ((node instanceof FSTTerminal)) {
      if (getStringContentIntoSingleLineNoSpacing(((FSTTerminal)node).getBody()).equals(getStringContentIntoSingleLineNoSpacing(content)))
      {
        FSTNonTerminal parent = ((FSTTerminal)node).getParent();
        parent.removeChild(node);
        return true;
      }
    }
    return false;
  }
  
  public static FSTNode findNodeByID(FSTNode source, String id)
  {
    if ((source instanceof FSTNonTerminal)) {
      for (FSTNode child : ((FSTNonTerminal)source).getChildren())
      {
        FSTNode result = findNodeByID(child, id);
        if (result != null) {
          return result;
        }
      }
    } else if (((source instanceof FSTTerminal)) && 
      (source.getType().equals("Id")) && 
      (((FSTTerminal)source).getBody().equals(id))) {
      return source;
    }
    return null;
  }
  
  public static String estimateProjectRootFolderPath(MergeContext context)
  {
    File left = context.getLeft();
    File base = context.getBase();
    File right = context.getRight();
    String rootFolderPath = "";
    if ((left != null) && (left.getAbsolutePath().contains(File.separator + "src" + File.separator)))
    {
      int srcidx = left.getAbsolutePath().indexOf(File.separator + "src" + File.separator);
      rootFolderPath = left.getAbsolutePath().substring(0, srcidx) + File.separator;
    }
    else if ((base != null) && (base.getAbsolutePath().contains(File.separator + "src" + File.separator)))
    {
      int srcidx = base.getAbsolutePath().indexOf(File.separator + "src" + File.separator);
      rootFolderPath = base.getAbsolutePath().substring(0, srcidx) + File.separator;
    }
    else if ((right != null) && (right.getAbsolutePath().contains(File.separator + "src" + File.separator)))
    {
      int srcidx = right.getAbsolutePath().indexOf(File.separator + "src" + File.separator);
      rootFolderPath = right.getAbsolutePath().substring(0, srcidx) + File.separator;
    }
    return rootFolderPath;
  }
  
  public static String[] estimateFilesProjectFolderPath(MergeContext context)
  {
    File left = context.getLeft();
    File base = context.getBase();
    File right = context.getRight();
    String rootFolderPathLeft = "";
    String rootFolderPathBase = "";
    String rootFolderPathRight = "";
    if ((left != null) && (left.getAbsolutePath().contains(File.separator + "src" + File.separator)))
    {
      int srcidx = left.getAbsolutePath().indexOf(File.separator + "src" + File.separator);
      rootFolderPathLeft = left.getAbsolutePath().substring(0, srcidx) + File.separator;
    }
    if ((base != null) && (base.getAbsolutePath().contains(File.separator + "src" + File.separator)))
    {
      int srcidx = base.getAbsolutePath().indexOf(File.separator + "src" + File.separator);
      rootFolderPathBase = base.getAbsolutePath().substring(0, srcidx) + File.separator;
    }
    if ((right != null) && (right.getAbsolutePath().contains(File.separator + "src" + File.separator)))
    {
      int srcidx = right.getAbsolutePath().indexOf(File.separator + "src" + File.separator);
      rootFolderPathRight = right.getAbsolutePath().substring(0, srcidx) + File.separator;
    }
    return new String[] { rootFolderPathLeft, rootFolderPathBase, rootFolderPathRight };
  }
  
  public static String indentCode(String sourceCode)
  {
    String indentedCode = sourceCode;
    try
    {
      CompilationUnit indenter = JavaParser.parse(new ByteArrayInputStream(sourceCode.getBytes()), StandardCharsets.UTF_8.displayName());
      indentedCode = indenter.toString();
    }
    catch (Exception localException) {}
    return indentedCode;
  }
  
  public static boolean areFilesDifferent(File left, File base, File right, String outputFilePath, MergeContext context)
  {
    boolean result = true;
    
    String auxleft = readFileContent(left);
    String leftcontent = auxleft == null ? "" : auxleft;
    String leftcontenttrim = auxleft == null ? "" : getStringContentIntoSingleLineNoSpacing(auxleft);
    
    String auxright = readFileContent(right);
    String rightcontent = auxright == null ? "" : auxright;
    String rightcontenttrim = auxright == null ? "" : getStringContentIntoSingleLineNoSpacing(auxright);
    
    String auxbase = readFileContent(base);
    String basecontentrim = auxbase == null ? "" : getStringContentIntoSingleLineNoSpacing(auxbase);
    if (basecontentrim.equals(leftcontenttrim))
    {
      context.semistructuredOutput = rightcontent;
      context.unstructuredOutput = rightcontent;
      result = false;
    }
    else if (basecontentrim.equals(rightcontenttrim))
    {
      context.semistructuredOutput = leftcontent;
      context.unstructuredOutput = leftcontent;
      result = false;
    }
    else if (leftcontenttrim.equals(rightcontenttrim))
    {
      context.semistructuredOutput = leftcontent;
      context.unstructuredOutput = leftcontent;
      result = false;
    }
    context.structuredOutput = context.semistructuredOutput;
    return (result) && (left != null) && (left.exists()) && (base != null) && (base.exists()) && (right != null) && (right.exists());
  }
  
  public static void main(String[] args)
  {
    String example = "public void m(){\n<<<<<<< /Users/paolaaccioly/Desktop/Teste/jdimeTests/left/Example.java\n        int a1;\n||||||| /Users/paolaaccioly/Desktop/Teste/jdimeTests/base/Example.java\n        int a;\n=======\n            int a;\n>>>>>>> /Users/paolaaccioly/Desktop/Teste/jdimeTests/right/Example.java\n        int b;\n        int c;\n<<<<<<< /Users/paolaaccioly/Desktop/Teste/jdimeTests/left/Example.java\n        int d1;\n||||||| /Users/paolaaccioly/Desktop/Teste/jdimeTests/base/Example.java\n        int d;\n=======\n        int d2;\n>>>>>>> /Users/paolaaccioly/Desktop/Teste/jdimeTests/right/Example.java\n    }";
    
    List<MergeConflict> mcs = extractMergeConflicts(example);
    System.out.println(mcs);
  }
  
  public static List<MergeConflict> filterNonOverlapingMergeConflicts(List<MergeConflict> mergeConflictsToBeFiltered, List<MergeConflict> baseComparison)
  {
    List<MergeConflict> result = new ArrayList();
    Iterator localIterator2;
    for (Iterator localIterator1 = baseComparison.iterator(); localIterator1.hasNext(); localIterator2.hasNext())
    {
      MergeConflict mco = (MergeConflict)localIterator1.next();
      localIterator2 = mergeConflictsToBeFiltered.iterator(); continue;MergeConflict mcf = (MergeConflict)localIterator2.next();
      String lmco = getStringContentIntoSingleLineNoSpacing(mco.left);
      String rmco = getStringContentIntoSingleLineNoSpacing(mco.right);
      
      String lmcf = getStringContentIntoSingleLineNoSpacing(mcf.left);
      String rmcf = getStringContentIntoSingleLineNoSpacing(mcf.right);
      if ((lmco.equals(lmcf)) && (rmco.equals(rmcf))) {
        result.add(mcf);
      }
    }
    return result;
  }
  
  public static double computeStringSimilarity(String first, String second)
  {
    String longer = first;String shorter = second;
    if (first.length() < second.length())
    {
      longer = second;
      shorter = first;
    }
    int longerLength = longer.length();
    if (longerLength == 0) {
      return 1.0D;
    }
    int levenshteinDistance = StringUtils.getLevenshteinDistance(first, second);
    return (longerLength - levenshteinDistance) / longerLength;
  }
  
  private static String undoReplaceConflictMarkers(String indentedCode)
  {
    indentedCode = indentedCode.replaceAll("int mmmm;", "<<<<<<< MINE");
    indentedCode = indentedCode.replaceAll("int bbbb;", "=======");
    indentedCode = indentedCode.replaceAll("int yyyy;", ">>>>>>> YOURS");
    return indentedCode;
  }
  
  private static String replaceConflictMarkers(String sourceCode)
  {
    sourceCode = sourceCode.replaceAll("<<<<<<< MINE", "int mmmm;");
    sourceCode = sourceCode.replaceAll("=======", "int bbbb;");
    sourceCode = sourceCode.replaceAll(">>>>>>> YOURS", "int yyyy;");
    return sourceCode;
  }
  
  public static String prettyPrint(FSTNonTerminal node)
  {
    SimplePrintVisitor visitor = new SimplePrintVisitor();
    visitor.visit(node);
    return visitor.getResult().replaceAll("  ", " ");
  }
}
