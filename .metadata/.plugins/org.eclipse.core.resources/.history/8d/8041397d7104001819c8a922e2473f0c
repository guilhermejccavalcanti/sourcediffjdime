package br.ufpe.cin.printers;

import br.ufpe.cin.app.JFSTMerge;
import br.ufpe.cin.exceptions.PrintException;
import br.ufpe.cin.files.FilesManager;
import br.ufpe.cin.files.FilesTuple;
import br.ufpe.cin.generated.SimplePrintVisitor;
import br.ufpe.cin.mergers.util.MergeContext;
import br.ufpe.cin.mergers.util.MergeScenario;
import de.ovgu.cide.fstgen.ast.FSTNode;
import de.ovgu.cide.fstgen.ast.FSTNonTerminal;
import java.io.File;
import java.io.PrintStream;
import java.util.List;

public final class Prettyprinter
{
  public static String print(FSTNode tree)
  {
    String printable = "";
    
    SimplePrintVisitor printer = new SimplePrintVisitor();
    FSTNode root = getCompilationUnit(tree);
    if (root != null)
    {
      root.accept(printer);
      printable = printer.getResult();
    }
    return printable;
  }
  
  public static void printOnScreenMergedCode(MergeContext context)
  {
    System.out.println("S3M OUTPUT:");
    System.out.println(context.semistructuredOutput.isEmpty() ? "empty (deleted, inexistent or invalid merged files)\n" : context.semistructuredOutput);
    
    System.out.println("JDIME OUTPUT:");
    System.out.println(context.structuredOutput.isEmpty() ? "empty (deleted, inexistent or invalid merged files)\n" : context.structuredOutput);
  }
  
  public static void generateMergedFile(MergeContext context, String outputFilePath)
    throws PrintException
  {
    if (outputFilePath != null)
    {
      if (outputFilePath.isEmpty()) {
        outputFilePath = context.getRight().getAbsolutePath();
      }
      String semistructuredOutputFilePath = outputFilePath;
      String semistructuredMergeOutputContent = context.semistructuredOutput;
      boolean writeSucceed = FilesManager.writeContent(semistructuredOutputFilePath, semistructuredMergeOutputContent);
      if ((writeSucceed) && (!JFSTMerge.isGit))
      {
        String unstructuredOutputFilePath = outputFilePath + ".merge";
        String unstructuredMergeOutputContent = context.unstructuredOutput;
        writeSucceed = FilesManager.writeContent(unstructuredOutputFilePath, unstructuredMergeOutputContent);
      }
      if (writeSucceed)
      {
        String jdimeOutputFilePath = outputFilePath + ".jdime";
        String jdimeOutputContent = context.structuredOutput;
        writeSucceed = FilesManager.writeContent(jdimeOutputFilePath, jdimeOutputContent);
      }
      if (!writeSucceed) {
        throw new PrintException("Unable to manage merged output file!");
      }
    }
  }
  
  public static void generateMergedTuple(FilesTuple tuple)
    throws PrintException
  {
    String outputDirPath = tuple.getOutputpath();
    if (outputDirPath != null)
    {
      String fileNameExample;
      String fileNameExample;
      if (tuple.getBaseFile() != null)
      {
        fileNameExample = tuple.getBaseFile().getName();
      }
      else
      {
        String fileNameExample;
        if (tuple.getLeftFile() != null) {
          fileNameExample = tuple.getLeftFile().getName();
        } else {
          fileNameExample = tuple.getRightFile().getName();
        }
      }
      String outputFilePath = outputDirPath + File.separator + fileNameExample;
      generateMergedFile(tuple.getContext(), outputFilePath);
    }
  }
  
  public static void generateMergedScenario(MergeScenario scenario)
    throws PrintException
  {
    String mergedRevisionId = "rev_" + scenario.getLeftRevisionID() + "-" + scenario.getRightRevisionID();
    List<FilesTuple> tuples = scenario.getTuples();
    for (FilesTuple mergedTuple : tuples) {
      if (mergedTuple.getContext() != null)
      {
        String mergedDirectory = mergedTuple.getOutputpath().replace(scenario.getRightRevisionID(), mergedRevisionId);
        mergedTuple.setOutputpath(mergedDirectory);
        generateMergedTuple(mergedTuple);
      }
    }
  }
  
  private static FSTNonTerminal getCompilationUnit(FSTNode tree)
  {
    if ((tree != null) && ((tree instanceof FSTNonTerminal)))
    {
      FSTNonTerminal node = (FSTNonTerminal)tree;
      if (node.getType().equals("CompilationUnit")) {
        return node;
      }
      return node.getChildren().isEmpty() ? null : getCompilationUnit((FSTNode)node.getChildren().get(1));
    }
    return null;
  }
}
