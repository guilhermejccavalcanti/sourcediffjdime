package br.ufpe.cin.fpfn;

import java.io.File;
import java.io.FileOutputStream;
import java.io.PrintWriter;
import java.util.List;

import br.ufpe.cin.files.FilesManager;
import br.ufpe.cin.mergers.util.MergeConflict;
import br.ufpe.cin.mergers.util.MergeContext;

/**
 * Printer of different merge tools conflicts.
 * @author Guilherme
 */
//FPFN
final public class ConflictsPrinter {
	public static void print(MergeContext context){
		if(null!=context.semistructuredOutput && null!=context.structuredOutput){
			//printing ssmerge confs
			List<MergeConflict> ssmergeconfs = FilesManager.extractMergeConflicts(context.semistructuredOutput);
			String logpath = System.getProperty("user.home")+ File.separator + ".jfstmerge" + File.separator +"confsjfstmerge.txt";
			printConflicts(context, ssmergeconfs, logpath);

			//printing jdime confs
			List<MergeConflict> jdimeconfs   = FilesManager.extractMergeConflicts(context.structuredOutput);
			logpath = System.getProperty("user.home")+ File.separator + ".jfstmerge" + File.separator +"confsjdime.txt";
			printConflicts(context, jdimeconfs,logpath);
		}
	}

	private static void printConflicts(MergeContext context, List<MergeConflict> confs, String logpath) {
		if(!confs.isEmpty()){
			try{
				StringBuilder builder = new StringBuilder();
				builder.append(
						  ((context.getLeft()!=null)? context.getLeft() .getPath() : "empty") + ","
						+ ((context.getBase()!=null)? context.getBase() .getPath() : "empty") + ","
						+ ((context.getRight()!=null)?context.getRight().getPath() : "empty") + "\n"
						);
				builder.append("----------------------------\n");
				for(MergeConflict mc : confs){
					builder.append(mc.body);
					builder.append("\n----------------------------\n");
				}
				//System.out.println(builder.toString());
				PrintWriter pw = new PrintWriter(new FileOutputStream(new File(logpath), true), true); 
				pw.append(builder.toString()+"\n");
				pw.close();
			}catch(Exception e){
				e.printStackTrace();
				System.exit(-1);
			}
		}
	}
}
