package br.ufpe.cin.mergers;

import br.ufpe.cin.exceptions.ExceptionUtils;
import br.ufpe.cin.exceptions.TextualMergeException;
import br.ufpe.cin.files.FilesManager;
import de.ovgu.cide.fstgen.ast.FSTNode;
import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintStream;
import org.eclipse.jgit.diff.RawText;
import org.eclipse.jgit.diff.RawTextComparator;
import org.eclipse.jgit.lib.Constants;
import org.eclipse.jgit.merge.MergeAlgorithm;
import org.eclipse.jgit.merge.MergeFormatter;
import org.eclipse.jgit.merge.MergeResult;

public final class TextualMerge {
	public static String merge(File left, File base, File right,
			boolean ignoreWhiteSpaces) throws TextualMergeException {
		String textualMergeResult = null;

		String leftContent = (left == null) || (!left.exists()) ? ""
				: FilesManager.readFileContent(left);
		String baseContent = (base == null) || (!base.exists()) ? ""
				: FilesManager.readFileContent(base);
		String rightContent = (right == null) || (!right.exists()) ? ""
				: FilesManager.readFileContent(right);
		textualMergeResult = merge(leftContent, baseContent, rightContent,
				ignoreWhiteSpaces);
		return textualMergeResult;
	}

	public static String merge(String leftContent, String baseContent,
			String rightContent, boolean ignoreWhiteSpaces)
			throws TextualMergeException {
		String textualMergeResult = null;
		try {
			RawTextComparator textComparator = ignoreWhiteSpaces ? RawTextComparator.WS_IGNORE_ALL
					: RawTextComparator.DEFAULT;
			MergeResult mergeCommand = new MergeAlgorithm().merge(
					textComparator, new RawText(Constants.encode(baseContent)),
					new RawText(Constants.encode(leftContent)), new RawText(
							Constants.encode(rightContent)));

			ByteArrayOutputStream output = new ByteArrayOutputStream();
			new MergeFormatter().formatMerge(output, mergeCommand, "BASE",
					"MINE", "YOURS", "UTF-8");
			textualMergeResult = new String(output.toByteArray(), "UTF-8");
		} catch (Exception e) {
			throw new TextualMergeException(ExceptionUtils.getCauseMessage(e),
					leftContent, baseContent, rightContent);
		}
		return textualMergeResult;
	}

	public String mergeIncludingBase(String leftContent, String baseContent,
			String rightContent, FSTNode node) throws TextualMergeException {
		try {
			long time = System.currentTimeMillis();
			File tmpDir = new File(System.getProperty("user.dir")
					+ File.separator + "fstmerge_tmp" + time);
			tmpDir.mkdir();

			File fileVar1 = File.createTempFile("fstmerge_var1_", ".java",
					tmpDir);
			File fileBase = File.createTempFile("fstmerge_base_", ".java",
					tmpDir);
			File fileVar2 = File.createTempFile("fstmerge_var2_", ".java",
					tmpDir);

			FilesManager.writeContent(fileVar1, leftContent);
			FilesManager.writeContent(fileBase, baseContent);
			FilesManager.writeContent(fileVar2, rightContent);

			String mergeCmdInclBase = "";
			if (System.getProperty("os.name").contains("Windows")) {
				mergeCmdInclBase = "C:/KDiff3/bin/diff3.exe -m \""
						+ fileVar1.getPath() + "\"" + " " + "\""
						+ fileBase.getPath() + "\"" + " " + "\""
						+ fileVar2.getPath() + "\"";
			} else {
				mergeCmdInclBase = "diff3 -m " + fileVar1.getPath() + " "
						+ fileBase.getPath() + " " + fileVar2.getPath();
			}
			Runtime run = Runtime.getRuntime();
			Process pr = run.exec(mergeCmdInclBase);
			BufferedReader buf = new BufferedReader(new InputStreamReader(
					pr.getInputStream()));
			String line = "";
			String resultInclBase = "";
			while ((line = buf.readLine()) != null) {
				resultInclBase = resultInclBase + line + "\n";
			}
			pr.getInputStream().close();

			buf = new BufferedReader(new InputStreamReader(pr.getErrorStream()));
			while ((line = buf.readLine()) != null) {
				System.err.println(line);
			}
			pr.getErrorStream().close();
			pr.getOutputStream().close();

			fileVar1.delete();
			fileBase.delete();
			fileVar2.delete();
			tmpDir.delete();

			return resultInclBase;
		} catch (Exception e) {
			throw new TextualMergeException(ExceptionUtils.getCauseMessage(e),
					leftContent, baseContent, rightContent);
		}
	}
}
